//###########################################################################
// Description:
//
// Task 1: 2 pole 2 zero IIR filter
// Task 8: Delay Element Variable Initialization
//
//###########################################################################
// $TI Release:  $
// $Release Date:  $
//###########################################################################

#include "DSP28x_Project.h"
// Include the test header file whose name is based on the test name
// which is defined by the macro TEST on the command line
#include XSTRINGIZE(XCONCAT(TEST_NAME,_shared.h))

//Variables global to all CLA tasks only
float W2[2]; //w2(n) and w2(n-1)
float W1[2]; //w1(n) and w1(n-1)

//Task 1 : 2p2z IIR Transposed Direct Form II Filter
// ALGORITHM:
//
// Difference Equation :
//
// The operations for each biquad, in order, is as follows 
// 1. yn  = xn*b(0) + q4 
// 2. q3 = xn*b(1) + yn*a(1) + q2
// 3. q4 = q3
// 4. q1 = xn*b(2) + yn*a(2)
// 5. q2 = q1
//      where
//              yn =output sample of the filter at index n 
//              xn =input sample of the filter at index n 
//			   qx =intermediate values stored in the delay buffer
//
// Transfer Function :
//   The difference equation is split up into multiple Second-Order Sections(SOS)
//   Each SOS represents a Biquad with the following transfer function                                 
//                                  -1        -2
//              Y(z)   b(0) + b(1) z  + b(2) z  
//			  ----- = ----------------------- 
//			   X(z)	               -1       -2
//					  a(0) + a(1) z  + a(2) z 
//
//   For a detailed treatment of Direct II Forms see
//   [1]Digital Signal Processing, Proakis, J. G. and Manolakis, D. G. - Chapter 7
//   [2]Understanding Digital Signal Processing 3rd ed, Lyons, R. G.
//
//     Network Diagram  : 
//
// xn------>(x)--->(+)--------------->yn
//      |    ^      ^             |
//      |    |      |q4           |
//      |    b(0)  (z)            |
//      |           ^             |
//      |           |q3           |
//      |-->(x)--->(+)<-----(x)---|
//      |    ^      ^        ^    |
//      |    |      |q2      |    |
//      |    b(1)  (z)       a(1) |
//      |           ^             |
//      |           |q1           |
//      --->(x)--->(+)<-----(x)----
//           ^               ^
//           |               |
//           b(2)            a(2)
__interrupt void Cla1Task1 ( void )
{
	//Local Variables
	
	//Code
	__mdebugstop();
	yn = xn*S1_B[0] + W2[1];
	W2[0] = xn*S1_B[1] + yn*S1_A[1] + W1[1];
	W2[1] = W2[0];
	W1[0] = xn*S1_B[2] + yn*S1_A[2];
	W1[1] = W1[0];
//	__mnop();
//	__mnop();
//	__mnop();
}

__interrupt void Cla1Task2 ( void )
{
	
}
__interrupt void Cla1Task3 ( void )
{
	
}
__interrupt void Cla1Task4 ( void )
{
	
}
__interrupt void Cla1Task5 ( void )
{
	
}
__interrupt void Cla1Task6 ( void )
{
	
}
__interrupt void Cla1Task7 ( void )
{
	
}
//Task 8 will initialize the variables used in Task 1
__interrupt void Cla1Task8 ( void )
{
	W2[0] = 0; W2[1] = 0;
	W1[0] = 0; W1[1] = 0;	
}


