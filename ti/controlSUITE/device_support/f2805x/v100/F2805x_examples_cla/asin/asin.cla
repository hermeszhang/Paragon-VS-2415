//###########################################################################
// Description:
//
// Task 1: asin lookup algorithm
//
//###########################################################################
// $TI Release:  $
// $Release Date:  $
//###########################################################################

#include "DSP28x_Project.h"
// Include the test header file whose name is based on the test name
// which is defined by the macro TEST on the command line
#include XSTRINGIZE(XCONCAT(TEST_NAME,_shared.h))

//Task 1 : Calculate asin(X)
// Description: 
//             Step(1): Calculate absolute of the input X  
//
//             Step(2):   Use the upper 6-bits of input "X" value as an
//                          index into the table to obtain the coefficients
//                          for a second order equation:
//
//                        _FPUasinTable:
//                             CoeffA0[0]
//                             CoeffA1[0]
//                             CoeffA2[0]
//                                .
//                                .
//                             CoeffA0[63]
//                             CoeffA1[63]
//                             CoeffA2[63]
//
//             Step(3):   Calculate the angle using the folowing equation:
//
//                        arctan(Ratio) = A0 + A1*Ratio + A2*Ratio*Ratio
//                        arctan(Ratio) = A0 + Ratio(A1 + A2*Ratio)
//
//             Step(4):   The final angle is determined as follows:
//
//                        if( X < 0 )
//                            Angle = -Angle
__interrupt void Cla1Task1 ( void )
{
	//Local Variables
	int xTblIdx; //integer valued Table index
	float A0,A1,A2; //Table coefficients
	float *entry;
    float result;

	//Preprocessing
	__mdebugstop();
	xTblIdx = fVal * TABLE_SIZE_M_1; //convert table index to u16-bits
	xTblIdx = xTblIdx * 3; //Table is ordered as 3 32-bit coefficients, the
	                       //index points to these triplets, hence the *3*sizeof(float)
    entry = &CLAasinTable[xTblIdx];
    A0 = *entry++;
    A1 = *entry++;
    A2 = *entry;

    
    result = A0 + fVal*(A1 + A2*fVal);	                 
	
	//Post processing
	if(fVal < 0){
		result = - result;	
	}
    
    fResult = result;
}

__interrupt void Cla1Task2 ( void )
{
	
}
__interrupt void Cla1Task3 ( void )
{
	
}
__interrupt void Cla1Task4 ( void )
{
	
}
__interrupt void Cla1Task5 ( void )
{
	
}
__interrupt void Cla1Task6 ( void )
{
	
}
__interrupt void Cla1Task7 ( void )
{
	
}
__interrupt void Cla1Task8 ( void )
{
	
}

