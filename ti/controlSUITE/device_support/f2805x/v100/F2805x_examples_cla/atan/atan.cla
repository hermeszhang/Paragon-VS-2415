//###########################################################################
// Description:
//
// Task 1: atan lookup algorithm
//
//###########################################################################
// $TI Release:  $
// $Release Date:  $
//###########################################################################

#include "DSP28x_Project.h"
// Include the test header file whose name is based on the test name
// which is defined by the macro TEST on the command line
#include XSTRINGIZE(XCONCAT(TEST_NAME,_shared.h))

//Task 1 : Calculate atan(Y)
// Description: 
//             Step(1):   if( 1.0 >= abs(Y) )
//                            Numerator   = abs(Y)
//                            Denominator = 1.0
//                        else
//                            Numerator   = 1.0
//                            Denominator = abs(Y)
//
//             Step(2):   Ratio = Numerator/Denominator
//
//                        Note: Ratio range = 0.0 to 1.0
//
//             Step(3):   Use the upper 6-bits of the "Ratio" value as an
//                        index into the table to obtain the coefficients
//                        for a second order equation:
//
//                        _FPUatan2Table:
//                             CoeffA0[0]
//                             CoeffA1[0]
//                             CoeffA2[0]
//                                .
//                                .
//                             CoeffA0[63]
//                             CoeffA1[63]
//                             CoeffA2[63]
//
//             Step(4):   Calculate the angle using the folowing equation:
//
//                        arctan(Ratio) = A0 + A1*Ratio + A2*Ratio*Ratio
//                        arctan(Ratio) = A0 + Ratio(A1 + A2*Ratio)
//
//             Step(5):   The final angle is determined as follows:
//
//                        if( Y >= 0 and 1.0 >= abs(Y) )
//                            Angle = arctan(abs(Y)/1.0)
//                        if( Y >= 0 and 1.0 <  abs(Y) )
//                            Angle = PI/2 - arctan(1.0/abs(Y))
//                        if( Y < 0 )
//                            Angle = -Angle
__interrupt void Cla1Task1 ( void )
{
   //Local Variables
    unsigned int uxTblIdx; //unsigned integer valued Table index
    float ratio;
    float tmp,num,den;
    float A0,A1,A2; //Table coefficients
    float *base;
    float result;
            
    //Preprocessing
    __mdebugstop();
	num = __mminf32(fabs(fVal),1.0);
	den = __mmaxf32(fabs(fVal),1.0);
    
    ratio = (num/den); //Expected the newton raphson algo for better 
                       //accuracy on the divide
    uxTblIdx = ratio * TABLE_SIZE_M_1 * 3; //convert table index to u16-bits
    uxTblIdx = uxTblIdx * 3; //Table is ordered as 3 32-bit coefficients, the
                             //index points to these triplets, hence the *3*sizeof(float)
   
   base = &CLAatan2Table[uxTblIdx];
   A0 = *base++;
   A1 = *base++;
   A2 = *base;
        
   result = A0 + ratio*(A1 + A2*ratio);                       
        
    //Post processing
   if(fabs(fVal) > 1.0){
      result = PIBYTWO - result;
    }
   if(fVal < 0.0){
      result = -result;
   }

    fResult = result;
}

__interrupt void Cla1Task2 ( void )
{
	
}
__interrupt void Cla1Task3 ( void )
{
	
}
__interrupt void Cla1Task4 ( void )
{
	
}
__interrupt void Cla1Task5 ( void )
{
	
}
__interrupt void Cla1Task6 ( void )
{
	
}
__interrupt void Cla1Task7 ( void )
{
	
}
__interrupt void Cla1Task8 ( void )
{
	
}

